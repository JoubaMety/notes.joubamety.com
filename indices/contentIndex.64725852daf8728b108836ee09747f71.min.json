{"/":{"title":"JoubaMety's Notes","content":"This is the place where I, **JoubaMety**, store my public notes, code snippets and such.\n\nWhat inspired me to start this was that I was often finding myself scrolling through console history or browser history, searching for how to use specific video filter in `ffmpeg`.\u003cbr\u003e\nI also help some people with `ffmpeg`, so having a place which I can just link to other people, with better info rather than remembering from head, which can be sometimes treacherous or even dangerous.\u003cbr\u003e\n\nHere are the main tags, where you can find notes under:\n- [[/tags/video|Video]] - Here, you can find stuff related to creating or transcoding videos\n- [[test/video_codecs|Video Codec Test]] - For checking browser support of various video codecs (Apple being really notorious for this)","lastmodified":"2023-04-17T15:06:57.416821475Z","tags":[]},"/test/video_codecs":{"title":"Video with different video codes for testing browser support","content":"All of these videos are encoded with target bitrate of `4M`,\u003cbr\u003e\nindividual video weighing at around `9 MB`.\n\n# AVC/H.264\n\u003cvideo id=\"video1\" controls width=\"512\"\u003e\n\t\u003csource src=\"/test/_media/site_support_01_AVC.mp4\" type='video/mp4; codecs=\"avc1\"'\u003e\n\tHuh\n\u003c/video\u003e\n\u003cscript\u003e\nvar video = document.getElementById(\"video1\");\nvideo.setAttribute(\"controls\",\"controls\")   \n\u003c/script\u003e\n\n```powershell\n$ ffmpeg -hwaccel auto -ss 18.222 -to 36.250 -i \".\\2022-06-07_19.51.20.mp4\" -vf \"fps=60\" -c:v h264_nvenc -preset p7 -b:v 4M -movflags +faststart \".\\site_support_01_AVC.mp4\"\n```\n```\n$ ffprobe \".\\site_support_01_AVC.mp4\"\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from 'D:\\Games\\MultiMC\\instances\\Mikeinette 2.0\\.minecraft\\movies-144hz\\site_support_01_AVC.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2avc1mp41\n    encoder         : Lavf60.4.100\n  Duration: 00:00:18.03, start: 0.000000, bitrate: 3965 kb/s\n  Stream #0:0[0x1](und): Video: h264 (Main) (avc1 / 0x31637661), yuv420p(progressive), 1440x1080 [SAR 1:1 DAR 4:3], 3959 kb/s, 60 fps, 60 tbr, 15360 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc60.5.100 h264_nvenc\n```\n# HEVC/H.265\n\u003cvideo id=\"video2\" controls width=\"512\"\u003e\n\t\u003csource src=\"/test/_media/site_support_02_HEVC.mp4\" type='video/mp4; codecs=\"hvc1\"'\u003e\n\tHuh\n\u003c/video\u003e\n\u003cscript\u003e\nvar video = document.getElementById(\"video2\");\nvideo.setAttribute(\"controls\",\"controls\")   \n\u003c/script\u003e\n\n```powershell\n$ ffmpeg -hwaccel auto -ss 18.222 -to 36.250 -i \".\\2022-06-07_19.51.20.mp4\" -vf \"fps=60\" -c:v hevc_nvenc -preset p7 -b:v 4M -movflags +faststart \".\\site_support_02_HEVC.mp4\"\n```\n```\n$ ffprobe \".\\site_support_02_HEVC.mp4\"\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from 'D:\\Games\\MultiMC\\instances\\Mikeinette 2.0\\.minecraft\\movies-144hz\\site_support_02_HEVC.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2mp41\n    encoder         : Lavf60.4.100\n  Duration: 00:00:18.03, start: 0.000000, bitrate: 4176 kb/s\n  Stream #0:0[0x1](und): Video: hevc (Main) (hev1 / 0x31766568), yuv420p(tv, progressive), 1440x1080 [SAR 1:1 DAR 4:3], 4170 kb/s, 60 fps, 60 tbr, 15360 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc60.5.100 hevc_nvenc\n```\n# VP9\n\u003cvideo id=\"video3\" controls width=\"512\"\u003e\n\t\u003csource src=\"/test/_media/site_support_03_VP9.mp4\" type=\"video/mp4\"\u003e\n\tHuh\n\u003c/video\u003e\n\u003cscript\u003e\nvar video = document.getElementById(\"video3\");\nvideo.setAttribute(\"controls\",\"controls\")   \n\u003c/script\u003e\n\n```powershell\n$ ffmpeg -hwaccel auto -ss 18.222 -to 36.250 -i \".\\2022-06-07_19.51.20.mp4\" -vf \"fps=60\" -c:v libvpx-vp9 -row-mt 1 -b:v 4M -movflags +faststart \".\\site_support_03_VP9.mp4\"\n```\n```\n$ ffprobe \".\\site_support_03_VP9.mp4\"\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from 'D:\\Games\\MultiMC\\instances\\Mikeinette 2.0\\.minecraft\\movies-144hz\\site_support_03_VP9.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomiso2mp41\n    encoder         : Lavf60.4.100\n  Duration: 00:00:18.03, start: 0.000000, bitrate: 3773 kb/s\n  Stream #0:0[0x1](und): Video: vp9 (Profile 0) (vp09 / 0x39307076), yuv420p(tv, progressive), 1440x1080, 3771 kb/s, SAR 1:1 DAR 4:3, 60 fps, 60 tbr, 15360 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc60.5.100 libvpx-vp9\n```\n# AV1\n\u003cvideo id=\"video4\" controls width=\"512\"\u003e\n\t\u003csource src=\"/test/_media/site_support_04_AV1_SVT.mp4\" type=\"video/mp4\"\u003e\n\tHuh\n\u003c/video\u003e\n\u003cscript\u003e\nvar video = document.getElementById(\"video4\");\nvideo.setAttribute(\"controls\",\"controls\")   \n\u003c/script\u003e\n\n```powershell\n$ ffmpeg -hwaccel auto -ss 18.222 -to 36.250 -i \".\\2022-06-07_19.51.20.mp4\" -vf \"fps=60\" -c:v libsvtav1 -preset 8 -b:v 4M -movflags +faststart \".\\site_support_04_AV1_SVT.mp4\"\n```\n```\n$ ffprobe \".\\site_support_04_AV1_SVT.mp4\"\nInput #0, mov,mp4,m4a,3gp,3g2,mj2, from 'D:\\Games\\MultiMC\\instances\\Mikeinette 2.0\\.minecraft\\movies-144hz\\site_support_04_AV1_SVT.mp4':\n  Metadata:\n    major_brand     : isom\n    minor_version   : 512\n    compatible_brands: isomav01iso2mp41\n    encoder         : Lavf60.4.100\n  Duration: 00:00:18.03, start: 0.000000, bitrate: 4092 kb/s\n  Stream #0:0[0x1](und): Video: av1 (Main) (av01 / 0x31307661), yuv420p(tv, progressive), 1440x1080, 4090 kb/s, SAR 1:1 DAR 4:3, 60 fps, 60 tbr, 15360 tbn (default)\n    Metadata:\n      handler_name    : VideoHandler\n      vendor_id       : [0][0][0][0]\n      encoder         : Lavc60.5.100 libsvtav1\n```\n# FFMPEG Build\n```\nffmpeg version 2023-03-02-git-814178f926-full_build-www.gyan.dev Copyright (c) 2000-2023 the FFmpeg developers\n  built with gcc 12.2.0 (Rev10, Built by MSYS2 project)\n  configuration: --enable-gpl --enable-version3 --enable-static --disable-w32threads --disable-autodetect --enable-fontconfig --enable-iconv --enable-gnutls --enable-libxml2 --enable-gmp --enable-bzlib --enable-lzma --enable-libsnappy --enable-zlib --enable-librist --enable-libsrt --enable-libssh --enable-libzmq --enable-avisynth --enable-libbluray --enable-libcaca --enable-sdl2 --enable-libaribb24 --enable-libdav1d --enable-libdavs2 --enable-libuavs3d --enable-libzvbi --enable-librav1e --enable-libsvtav1 --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxavs2 --enable-libxvid --enable-libaom --enable-libjxl --enable-libopenjpeg --enable-libvpx --enable-mediafoundation --enable-libass --enable-frei0r --enable-libfreetype --enable-libfribidi --enable-liblensfun --enable-libvidstab --enable-libvmaf --enable-libzimg --enable-amf --enable-cuda-llvm --enable-cuvid --enable-ffnvcodec --enable-nvdec --enable-nvenc --enable-d3d11va --enable-dxva2 --enable-libvpl --enable-libshaderc --enable-vulkan --enable-libplacebo --enable-opencl --enable-libcdio --enable-libgme --enable-libmodplug --enable-libopenmpt --enable-libopencore-amrwb --enable-libmp3lame --enable-libshine --enable-libtheora --enable-libtwolame --enable-libvo-amrwbenc --enable-libilbc --enable-libgsm --enable-libopencore-amrnb --enable-libopus --enable-libspeex --enable-libvorbis --enable-ladspa --enable-libbs2b --enable-libflite --enable-libmysofa --enable-librubberband --enable-libsoxr --enable-chromaprint\n```","lastmodified":"2023-04-17T15:06:57.476822308Z","tags":[]},"/video/ffmpeg/installation":{"title":"FFMPEG Installation","content":"# What's FFMPEG?\n# Install FFMPEG on Windows\n* Pre-compiled binaries\n\t* Recommend getting [Windows Terminal](https://learn.microsoft.com/en-us/windows/terminal/)!\n\t* Go to [`gyan.dev/ffmpeg/builds`](https://www.gyan.dev/ffmpeg/builds/) and pick either Git/Stable and Full/Essential (Recommend getting Stable-Full, I mainly use git for encoding with latest versions of AV1 encoders )\n\t* Extract the contents of `.zip` into `C:/Program Files/ffmpeg` (If ffmpeg Folder Doesn't exist, Create The Folder)\n\t* Right-click on the `bin` folder inside ffmpeg folder and `Copy path`\n\t* Go to Environment Variables, quickest way is to use Windows Search (`Win` Und `S`) and typing `env` and go with the first option. Another option is `Settings` -\u003e `System` -\u003e `Advanced System Settings`\n\t* Double-click on `Path` in either User or System Env. Var. \n\t* Create new entry with `New` button and paste the copied path\n\t* `OK` the two windows\n\t* You should be good to go! (As is obvious, you'll have to restart your terminal to apply new Env. Var.)\n\t* Type `ffmpeg` in Terminal To Make Sure Env. Var. Is Set Correctly!","lastmodified":"2023-04-17T15:06:57.476822308Z","tags":["ffmpeg","installation","windows"]},"/video/ffmpeg/video_with_static_background_image_and_audio":{"title":"Create a video with static background image and audio","content":"Sometimes, I like to share music to my Discord friends. **Unfortunately, Discord doesn't yet have native audio player in mobile apps. *(Except voice messages?! What's up with that, Discord?)***\u003cbr\u003e\nSo in order for my iOS/Android friends to still be able to play music without having to download them, I've started using [`ffmpeg`](video/ffmpeg/installation) to create videos with album art and music track VERY quickly, without the need of some kind of video editor, just one *(or multiple, depending on complexity of problem.)*\n\n# 0. Get album art if not available.\nYou might not have album art, but you might have music file with album art inside. If so, then there's very easy way to extract it.\n```bash\nffmpeg -i music.mp3 cover.jpg\n```\n# 1. The magic command\nWe're gonna basically input two media files: album art and music, use `libx264` with `-tune -stillimage` for best possible compression and `aac` because Apple s\\*\\*ks a\\*\\*, and then output to mp4\n```bash\nffmpeg -loop 1 -i cover.jpg -i music.mp3 -map 0:v:0 -map 1:a:0 -pix_fmt yuv420p -vf scale=1080:-2:flags=lanczos -c:v libx264 -tune stillimage -c:a aac -b:a 128k -shortest -movflags +faststart epic.mp4\n```\nI'm gonna point out few important things that make this command work.\n- `-loop 1` loops the image, because otherwise image will show for maybe one second and then the rest of video is broken because of that.\n- `-pix_fmt yuv420p` sets the pixel format to YUV420p, so we don't get unexpected behavior when converting from PNG's RGB24 or JPG's YUV444.\n- `-vf scale=1080:-2:flags=lanczos` scales the video to width of 1080 and then fitting height while still being divisible by 2.\n  This is important because of two things: efficiency and libx264.\n  - Efficiency is because we prolly won't need 2160x2160, which is more taxing to decode, but also to encode.\n  - Libx264 doesn't like height/width that isn't divisible by 2. So that's also an extra measure.\n- `-shortest` shorts the loop. Well, basically, since the first input `cover.jpg` is being looped constantly thanks to the first flag, we **need** to stop encoding once audio is done, because if we don't do this, it will continue encoding indefinitely until we fill our disk space with cover art.\n\n# The *very hopeful* result\n\u003cvideo id=\"myvideo\" controls width=\"256\"\u003e\n\t\u003csource src=\"/video/ffmpeg/_media/New Order - Blue Monday.mp4\" type=\"video/mp4\"\u003e\n\tHuh\n\u003c/video\u003e\n\u003cscript\u003e\nvar video = document.getElementById(\"myvideo\");\nvideo.setAttribute(\"controls\",\"controls\")   \n\u003c/script\u003e\n\n- **New Order - Blue Monday**\n```bash\nffmpeg -y -loop 1 -i .\\cover.JPG -ss 01:30 -to 01:40 -i '.\\01 - Blue Monday.flac' -map 0:v -map 1:a -pix_fmt yuv420p -vf scale=256:-2:flags=lanczos -c:v libsvtav1 -preset 6 -c:a libopus -b:a 80k -shortest -movflags +faststart '.\\New Order - Blue Monday.webm'\n```\n","lastmodified":"2023-04-17T15:06:57.476822308Z","tags":["video","ffmpeg","static background"]}}